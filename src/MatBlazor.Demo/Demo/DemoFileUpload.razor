@using System.IO
<h5 class="mat-h5">Example</h5>

<DemoContainer>
    <Content>
        <MatFileUpload OnChange="@FilesReady"></MatFileUpload>

        @foreach (var f in list)
        {
            <div>@f</div>
        }

        @code
        {
            List<string> list = new List<string>();

            void FilesReady(IMatFileUploadEntry[] files)
            {
                foreach (var file in files)
                {
                    list.Add($"Name: {file.Name} - Size: {file.Size}");
                }
            }
        }

    </Content>
    <SourceContent>
    	<BlazorFiddle Template="MatBlazor" Code=@(@"
        <MatFileUpload OnChange=""@FilesReady""></MatFileUpload>

        @foreach (var f in list)
        {
            <div>@f</div>
        }

        @code
        {
            List<string> list = new List<string>();

            void FilesReady(IMatFileUploadEntry[] files)
            {
                foreach (var file in files)
                {
                    list.Add($""Name: {file.Name} - Size: {file.Size}"");
                }
            }
        }

    ")></BlazorFiddle>
    </SourceContent>
</DemoContainer>


<h5 class="mat-h5">Read content of file</h5>

<DemoContainer>
    <Content>
        <MatFileUpload OnChange="@FilesReadyForContent"></MatFileUpload>
        <textarea style="width: 100%; max-height: 300px;">@fileContent</textarea>

        @code
        {

            string fileContent;

            async Task FilesReadyForContent(IMatFileUploadEntry[] files)
            {
                try
                {
                    var file = files.First();
                    if (file.Size > 1024 * 1024)
                    {
                        throw new Exception("File is too big for demo.");
                    }

                    var stream = await file.ReadAsStreamAsync();

                    using (var reader = new StreamReader(stream))
                    {
                        fileContent = await reader.ReadToEndAsync();
                    }
                }

                catch (Exception e)
                {
                    fileContent = $"Error:\r\n{e.Message}\r\n{e.StackTrace}";
                }
            }
        }


    </Content>
    <SourceContent>
    	<BlazorFiddle Template="MatBlazor" Code=@(@"
        <MatFileUpload OnChange=""@FilesReadyForContent""></MatFileUpload>
        <textarea style=""width: 100%; max-height: 300px;"">@fileContent</textarea>

        @code
        {

            string fileContent;

            async Task FilesReadyForContent(IMatFileUploadEntry[] files)
            {
                try
                {
                    var file = files.First();
                    if (file.Size > 1024 * 1024)
                    {
                        throw new Exception(""File is too big for demo."");
                    }

                    var stream = await file.ReadAsStreamAsync();

                    using (var reader = new StreamReader(stream))
                    {
                        fileContent = await reader.ReadToEndAsync();
                    }
                }

                catch (Exception e)
                {
                    fileContent = $""Error:\r\n{e.Message}\r\n{e.StackTrace}"";
                }
            }
        }


    ")></BlazorFiddle>
    </SourceContent>
</DemoContainer>