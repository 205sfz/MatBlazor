<DocMatCheckbox></DocMatCheckbox>

<h5 class="mat-h5">Example</h5>

<DemoContainer>
    <Content>
        <div>
            <MatCheckbox @bind-Value="@checked1" Label="@(getLabel(checked1))"></MatCheckbox>
        </div>
        <div>
            <MatCheckbox @bind-Value="@checked2" Label="@(getLabel(checked2))"></MatCheckbox>
        </div>
        <div>
            <MatCheckbox Disabled="true" @bind-Value="@checked1" Label="Disabled"></MatCheckbox>
        </div>
        <div>
            <MatCheckbox @bind-Value="@checked2">Inline Label</MatCheckbox>
        </div>
        
        <div>
            <MatCheckboxIndeterminate @bind-Value="@checked3">Indeterminate</MatCheckboxIndeterminate>
            <span>@(checked3.HasValue ? checked3.Value.ToString() : "null")</span>
            <MatButton OnClick="SetNull">Null</MatButton>
        </div>

        @code
        {
            bool checked1 = true;
            bool checked2 = false;
            bool? checked3 = null;


            string getLabel(bool val)
            {
                return !val ? "Check me!" : "Uncheck me?";
            }

            void SetNull()
            {
                checked3 = null;
            }
        }

    </Content>
    <SourceContent>
    	<BlazorFiddle Template="MatBlazor" Code=@(@"
        <div>
            <MatCheckbox @bind-Checked=""@Checked1"" Label=""@(getLabel(Checked1))""></MatCheckbox>
        </div>
        <div>
            <MatCheckbox @bind-Checked=""@Checked2"" Label=""@(getLabel(Checked2))""></MatCheckbox>
        </div>
        <div>
            <MatCheckbox Disabled=""true"" @bind-Checked=""@Checked1"" Label=""Disabled""></MatCheckbox>
        </div>
        <div>
            <MatCheckbox @bind-Checked=""@Checked2"">Inline Label</MatCheckbox>
        </div>

        @code
        {
            bool checked1 = true;
            bool checked2 = false;

            public bool Checked1
            {
                get { return checked1; }
                set
                {
                    checked1 = value;
                    StateHasChanged();
                }
            }

            public bool Checked2
            {
                get { return checked2; }
                set
                {
                    checked2 = value;
                    StateHasChanged();
                }
            }

            string getLabel(bool val)
            {
                return !val ? ""Check me!"" : ""Uncheck me?"";
            }

        }

    ")></BlazorFiddle>
    </SourceContent>
</DemoContainer>