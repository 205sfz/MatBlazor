<DocMatTable></DocMatTable>

<h5 class="mat-h5">Example</h5>
<DemoContainer>
    <Content>
        <MatTable Items="@cars" class="mat-elevation-z5">
            <MatTableHeader>
                <th>Name</th>
                <th>Price</th>
                <th>Horsepower</th>
            </MatTableHeader>
            <MatTableRow>
                <td>@context.Name</td>
                <td>@String.Format("${0:f2}", @context.Price)</td>
                <td>@context.Horsepower</td>
            </MatTableRow>
        </MatTable>

        @code
        {

            public class Car
            {
                public string Name { get; set; }
                public double Price { get; set; }
                public int Horsepower { get; set; }

                public Car(string name, double price, int horsepower)
                {
                    Name = name;
                    Price = price;
                    Horsepower = horsepower;
                }
            }

            Car[] cars = new[]
            {
                new Car("Volkswagen Golf", 10000, 220),
                new Car("Volkswagen Passat", 11000, 240),
                new Car("Volkswagen Polo", 12000, 110),
                new Car("Ford Focus", 13000, 200),
                new Car("Ford Fiesta", 14000, 160),
                new Car("Ford Fusion", 15000, 260),
                new Car("Ford Mondeo", 16000, 120),
            };

        }

    </Content>
    <SourceContent>
    	<BlazorFiddle Template="MatBlazor" Code=@(@"
        <MatTable Items=""@cars"" class=""mat-elevation-z5"">
            <MatTableHeader>
                <th>Name</th>
                <th>Price</th>
                <th>Horsepower</th>
            </MatTableHeader>
            <MatTableRow>
                <td>@context.Name</td>
                <td>@String.Format(""${0:f2}"", @context.Price)</td>
                <td>@context.Horsepower</td>
            </MatTableRow>
        </MatTable>

        @code
        {

            public class Car
            {
                public string Name { get; set; }
                public double Price { get; set; }
                public int Horsepower { get; set; }

                public Car(string name, double price, int horsepower)
                {
                    Name = name;
                    Price = price;
                    Horsepower = horsepower;
                }
            }

            Car[] cars = new[]
            {
                new Car(""Volkswagen Golf"", 10000, 220),
                new Car(""Volkswagen Passat"", 11000, 240),
                new Car(""Volkswagen Polo"", 12000, 110),
                new Car(""Ford Focus"", 13000, 200),
                new Car(""Ford Fiesta"", 14000, 160),
                new Car(""Ford Fusion"", 15000, 260),
                new Car(""Ford Mondeo"", 16000, 120),
            };

        }

    ")></BlazorFiddle>
    </SourceContent>
</DemoContainer>

<h5 class="mat-h5">Filter Example, Pull Data from API, Single Row Selection / Hover</h5>
<DemoContainer>
    <Content>
        <MatTable Items="@todos" LoadInitialData="true" Striped="true" RequestApiOnlyOnce="true" AllowSelection="true" RowClass="tester"
                  ApiUrl="https://jsonplaceholder.typicode.com/todos" FilterByColumnName="Title" DebounceMilliseconds="150" class="mat-elevation-z5">
            <MatTableHeader>
                <th>Id</th>
                <th>Completed</th>
                <th>Todo</th>
            </MatTableHeader>
            <MatTableRow>
                <td>@String.Format("{0:d}", @context.Id)</td>
                <td>@context.Completed</td>
                <td>@context.Title</td>
            </MatTableRow>
        </MatTable>

        @code
        {

            public class Todo
            {
                public int UserId { get; set; }
                public int Id { get; set; }
                public string Title { get; set; }
                public bool Completed { get; set; }

                public Todo()
                {
                }
            }

            Todo[] todos;
        }

    </Content>
    <SourceContent>
    	<BlazorFiddle Template="MatBlazor" Code=@(@"
        <MatTable Items=""@todos"" LoadInitialData=""true"" Striped=""true"" RequestApiOnlyOnce=""true"" AllowSelection=""true"" RowClass=""tester""
                  ApiUrl=""https://jsonplaceholder.typicode.com/todos"" FilterByColumnName=""Title"" DebounceMilliseconds=""150"" class=""mat-elevation-z5"">
            <MatTableHeader>
                <th>Id</th>
                <th>Completed</th>
                <th>Todo</th>
            </MatTableHeader>
            <MatTableRow>
                <td>@String.Format(""{0:d}"", @context.Id)</td>
                <td>@context.Completed</td>
                <td>@context.Title</td>
            </MatTableRow>
        </MatTable>

        @code
        {

            public class Todo
            {
                public int UserId { get; set; }
                public int Id { get; set; }
                public string Title { get; set; }
                public bool Completed { get; set; }

                public Todo()
                {
                }
            }

            Todo[] todos;
        }

    ")></BlazorFiddle>
    </SourceContent>
</DemoContainer>

<h5 class="mat-h5">Select row, with returning selected item example</h5>
<DemoContainer>
    <Content>
        <MatTable Items="tasks" class="mat-elevation-z5" AllowSelection="true" SelectionChanged="SelectionChangedEvent">
            <MatTableHeader>
                <th>Id</th>
                <th>Name</th>
                <th>Description</th>
            </MatTableHeader>
            <MatTableRow>
                <td>@context.Id</td>
                <td>@context.Name</td>
                <td>@context.Description</td>
            </MatTableRow>
        </MatTable>
        <p>@_currentSelectedTask</p>
        @code
        {
            private string _currentSelectedTask;
            public class Task
            {
                public int Id { get; set; }
                public string Name { get; set; }
                public string Description { get; set; }

                public Task(int id, string name, string description)
                {
                    Id = id;
                    Name = name;
                    Description = description;
                }
            }
            protected override void OnInitialized()
            {
            }

            Task[] tasks = new[]
                    {
                new Task(1, "T1", "Do somthing..."),
                new Task(2, "T2", "Do somthing..."),
                new Task(3, "T3", "Do somthing..."),
                new Task(4, "T4", "Do somthing..."),
                new Task(5, "T5", "Do somthing..."),
                new Task(6, "T6", "Do somthing..."),
                new Task(7, "T7", "Do somthing..."),
            };
            public void SelectionChangedEvent(object row)
            {
                if (row == null)
                {
                    _currentSelectedTask = "";
                }
                else
                {
                    _currentSelectedTask = string.Format("Task Nr. {0} has been selected", ((Task)row).Id);
                }

                this.StateHasChanged();
            }
        }

    </Content>
    <SourceContent>
    	<BlazorFiddle Template="MatBlazor" Code=@(@"
        <MatTable Items=""tasks"" class=""mat-elevation-z5"" AllowSelection=""true"" SelectionChanged=""SelectionChangedEvent"">
            <MatTableHeader>
                <th>Id</th>
                <th>Name</th>
                <th>Description</th>
            </MatTableHeader>
            <MatTableRow>
                <td>@context.Id</td>
                <td>@context.Name</td>
                <td>@context.Description</td>
            </MatTableRow>
        </MatTable>
        <p>@_currentSelectedTask</p>
        @code
        {
            private string _currentSelectedTask;
            public class Task
            {
                public int Id { get; set; }
                public string Name { get; set; }
                public string Description { get; set; }

                public Task(int id, string name, string description)
                {
                    Id = id;
                    Name = name;
                    Description = description;
                }
            }
            protected override void OnInitialized()
            {
            }

            Task[] tasks = new[]
                    {
                new Task(1, ""T1"", ""Do somthing...""),
                new Task(2, ""T2"", ""Do somthing...""),
                new Task(3, ""T3"", ""Do somthing...""),
                new Task(4, ""T4"", ""Do somthing...""),
                new Task(5, ""T5"", ""Do somthing...""),
                new Task(6, ""T6"", ""Do somthing...""),
                new Task(7, ""T7"", ""Do somthing...""),
            };
            public void SelectionChangedEvent(object row)
            {
                if (row == null)
                {
                    _currentSelectedTask = """";
                }
                else
                {
                    _currentSelectedTask = string.Format(""Task Nr. {0} has been selected"", ((Task)row).Id);
                }

                this.StateHasChanged();
            }
        }

    ")></BlazorFiddle>
    </SourceContent>
</DemoContainer>