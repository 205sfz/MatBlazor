@inject MatBlazor.Components.MatToast.IBaseMatToastContainer matToaster
@using  MatBlazor.Services.Toast;

<DocMatToast></DocMatToast>

<h5 class="mat-h5">Example</h5>
<DemoContainer>
    <Content>

        <div class="mat-layout-grid">
            <div class="mat-layout-grid-inner">
                <div class="mat-layout-grid-cell">
                    <h3>Data</h3>
                    <p><MatTextField Label="Title" bind-Value="_title"></MatTextField></p>
                    <p><MatTextField Label="Message" bind-Value="_message"></MatTextField></p>
                </div>
                <div class="mat-layout-grid-cell">
                    <h3>Actions</h3>
                    <MatButton Raised="true" class="mdc-toast-info" onclick="@(() => Show(ToastType.Info))">Info</MatButton>
                    <MatButton Raised="true" class="mdc-toast-success" onclick="@(() => Show(ToastType.Success))">Success</MatButton>
                    <MatButton Raised="true" class="mdc-toast-warning" onclick="@(() => Show(ToastType.Warning))">Warning</MatButton>
                    <MatButton Raised="true" class="mdc-toast-danger" onclick="@(() => Show(ToastType.Danger))">Danger</MatButton>
                </div>
                <div class="mat-layout-grid-cell">
                    <h3>Toast transitions</h3>
                    <p><MatTextField Label="Show duration" Type="number" bind-Value="_showTransitionDuration"></MatTextField></p>
                    <p><MatTextField Label="Visible duration" Type="number" bind-Value="_visibleStateDuration"></MatTextField></p>
                    <p><MatTextField Label="Hide duration" Type="number" bind-Value="_hideTransitionDuration"></MatTextField></p>
                </div>
                <div class="mat-layout-grid-cell">
                    <h3>General options</h3>
                    <p>
                        <MatSelect Label="Position" bind-Value="@matToaster.Configuration.PositionClass">
                            <MatOption Value="mdc-toast-top-left">Top left</MatOption>
                            <MatOption Value="mdc-toast-top-center">Top center</MatOption>
                            <MatOption Value="mdc-toast-top-right">Top right</MatOption>
                            <MatOption Value="mdc-toast-top-full-width">Top full width</MatOption>
                            <MatOption Value="mdc-toast-bottom-right">Bottom right</MatOption>
                            <MatOption Value="mdc-toast-bottom-center">Bottom center</MatOption>
                            <MatOption Value="mdc-toast-bottom-left">Bottom left</MatOption>
                            <MatOption Value="mdc-toast-bottom-full-width">Bottom full width</MatOption>
                        </MatSelect>
                    </p>
                    <p><MatTextField Label="Max visible toasts" Type="number" bind-Value="_maxDisplayedToasts"></MatTextField></p>
                    <p><MatCheckbox Label="Newest on Top" bind-Checked="@matToaster.Configuration.NewestOnTop"></MatCheckbox></p>
                    <p><MatCheckbox Label="Prevent duplicates" bind-Checked="@matToaster.Configuration.PreventDuplicates"></MatCheckbox></p>
                </div>
                <div class="mat-layout-grid-cell">
                    <h3>Toast options</h3>
                    <p><MatTextField Label="Max opacity (%)" Type="number" bind-Value="_maximumOpacity"></MatTextField></p>
                    <p><MatCheckbox Label="Require interaction" bind-Checked="@_requireInteraction"></MatCheckbox></p>
                    <p><MatCheckbox Label="Progress bar" bind-Checked="@_showProgressBar"></MatCheckbox></p>
                    <p><MatCheckbox Label="Close Button" bind-Checked="@_showCloseButton"></MatCheckbox></p>
                    <p><MatCheckbox Label="Action on click (message in console)" bind-Checked="@_actionOnClick"></MatCheckbox></p>
                </div>
            </div>
        </div>

    
        @functions {
            private string _title = "Test Title";
            private string _message = "Test Message";
            private bool _showProgressBar;
            private bool _showCloseButton;
            private bool _actionOnClick;
            private string _maximumOpacity;

            private string _showTransitionDuration;
            private string _visibleStateDuration;
            private string _hideTransitionDuration;

            private bool _requireInteraction;

            public string _maxDisplayedToasts
            {
                get
                {
                    return matToaster.Configuration.MaxDisplayedToasts.ToString();
                }
                set
                {
                    matToaster.Configuration.MaxDisplayedToasts = Convert.ToInt32(value);
                }
            }

            protected override void OnInit()
            {
                _showProgressBar = matToaster.Configuration.ShowProgressBar;
                _showCloseButton = matToaster.Configuration.ShowCloseButton;
                _maximumOpacity = matToaster.Configuration.MaximumOpacity.ToString();

                _showTransitionDuration = matToaster.Configuration.ShowTransitionDuration.ToString();
                _visibleStateDuration = matToaster.Configuration.VisibleStateDuration.ToString();
                _hideTransitionDuration = matToaster.Configuration.HideTransitionDuration.ToString();

                _requireInteraction = matToaster.Configuration.RequireInteraction;
            }

            public void Show(ToastType type)
            {
                matToaster.Add(type, _message, _title, config =>
                {
                    config.ShowCloseButton = _showCloseButton;
                    config.ShowProgressBar = _showProgressBar;
                    config.MaximumOpacity = Convert.ToInt32(_maximumOpacity);

                    config.ShowTransitionDuration = Convert.ToInt32(_showTransitionDuration);
                    config.VisibleStateDuration = Convert.ToInt32(_visibleStateDuration);
                    config.HideTransitionDuration = Convert.ToInt32(_hideTransitionDuration);

                    config.RequireInteraction = _requireInteraction;

                    if (_actionOnClick)
                    {
                        config.Onclick = toast =>
                        {
                            Console.WriteLine($"Title: \"{toast.Title}\"; message: \"{toast.Message}\"; Type: {toast.Options.Type}");
                            return Task.CompletedTask;
                        };
                    }
                });
            }
        }


    </Content>
    <SourceContent>
        <BlazorFiddle Template="MatBlazor" Code=@(@"
        <div>Danger Alert is open: @toastDangerIsOpen</div>
        <MatButton OnClick=""DangerButtonClick"">Open</MatButton>
        <MatToast bind-IsOpen=""@toastDangerIsOpen"" Type=""ToastType.Danger"" Dismissible=""true"" Message=""toastDangerMessage""></MatToast>


        @functions
        {
            bool toastDangerIsOpen = false;
            string toastDangerMessage = ""Danger Will Robinson!"";
            bool toastInfoIsOpen = false;
            bool toastSuccessIsOpen = false;

            void DangerButtonClick()
            {
                toastDangerIsOpen = true;
                this.StateHasChanged();
            }
            void InfoButtonClick()
            {
                toastInfoIsOpen = true;
                this.StateHasChanged();
            }
            void SuccessButtonClick()
            {
                toastSuccessIsOpen = true;
                this.StateHasChanged();
            }
        }
    ")></BlazorFiddle>
    </SourceContent>
</DemoContainer>
