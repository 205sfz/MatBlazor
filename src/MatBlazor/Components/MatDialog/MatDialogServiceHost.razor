@namespace MatBlazor
@using Microsoft.AspNetCore.Components
@inherits BaseMatComponent
@implements IDisposable
@inject IMatDialogService MatDialogService


@foreach (var item in MatDialogService.Items)
{
    <CascadingValue Value="item">
        <MatDialog @key="@item.Id" CanBeClosed="@(item.Options?.CanBeClosed ?? BaseMatDialog.CanBeClosedDefault)" IsOpen="@item.IsOpen" SurfaceClass="@item.Options?.SurfaceClass" SurfaceStyle="@item.Options?.SurfaceStyle" IsOpenChanged="@(b => OnIsOpenChanged(item, b))">
            <MatComponentHost Type="@item.ComponentType" Attributes="@item.Attributes"></MatComponentHost>
        </MatDialog>
    </CascadingValue>
}

@code {


    protected override void OnInitialized()
    {
        base.OnInitialized();
        MatDialogService.ItemsChanged += OnItemsChanged;
    }

    private void OnItemsChanged(object sender, IEnumerable<MatDialogReference> e)
    {
        this.InvokeAsync(() => { this.StateHasChanged(); });
    }

    private void OnIsOpenChanged(MatDialogReference item, bool b)
    {
        item.IsOpen = b;
        if (!b)
        {
            item.Close(null);
        }
    }

    public void Dispose()
    {
        MatDialogService.ItemsChanged -= OnItemsChanged;
    }

}