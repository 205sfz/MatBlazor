@inherits BaseMatTable
@typeparam TableItem

<table class="@ClassMapper.Class" style="@Style" ref="Ref">
    <thead>
        <tr class="mdc-table-header-row">@MatTableHeader</tr>
    </thead>
    <tbody>
        @foreach (var item in ItemList)
        {
            <tr class="mdc-table-row">@MatTableRow(item)</tr>
        }
    </tbody>
    @if (@ShowFooter)
    {
        <tfoot class="mdc-table-footer-row"></tfoot>
    }
</table>

@if (@ShowPaging)
{
<div class="mdc-paginator">
    <div class="mdc-paginator-container">
        <div class="mdc-paginator-page-size">
            Items per page:
            <MatSelect bind-Value="@PageSizeStr">
                <MatOption>5</MatOption>
                <MatOption>10</MatOption>
                <MatOption>25</MatOption>
                <MatOption>50</MatOption>
                <MatOption>100</MatOption>
            </MatSelect>
        </div>

        <div class="mdc-paginator-range-actions">
            <span class="mdc-paginator-range-label">Page @CurrentPage of @TotalPages</span>
            <div class="mdc-paginator-range-buttons">
                <MatIconButton Icon="first_page" onclick=@(async () => NavigateToPage("first")) Disabled=@(CurrentPage <= 1)></MatIconButton>
                <MatIconButton Icon="navigate_before" onclick=@(async () => NavigateToPage("previous")) Disabled=@(CurrentPage <= 1)></MatIconButton>
                @*@for (int i = StartPage; i <= EndPage; i++)
                    {
                        var currentPage = i;
                        <MatIconButton class="@(currentPage == CurrentPage ? "currentpage" : "")" onclick=@(async () => UpdateList(currentPage))>
                            @currentPage
                        </MatIconButton>
                    }*@
                <MatIconButton Icon="navigate_next" onclick=@(async () => NavigateToPage("next")) Disabled=@(CurrentPage == EndPage)></MatIconButton>
                <MatIconButton Icon="last_page" onclick=@(async () => NavigateToPage("last")) Disabled=@(CurrentPage == EndPage)></MatIconButton>
            </div>
        </div>
    </div>
</div>
}

@functions{
    protected string PageSizeStr
    {
        get => PageSize.ToString();
        set
        {
            PageSize = Convert.ToInt32(value);
            CurrentPage = 1;
            TotalPages = (int)Math.Ceiling(Items.Count() / (decimal)PageSize);  
            EndPage = TotalPages;
            StartPage = 1;
            SetPageSize("forward");                     
            UpdateList(1);
        }
    }
    
    [Parameter]
    RenderFragment MatTableHeader { get; set; }

    [Parameter]
    RenderFragment<TableItem> MatTableRow { get; set; }

    /// <summary>
    /// Specifies the data for the table.
    /// </summary>
    [Parameter]
    protected IEnumerable<TableItem> Items { get; set; }

    protected IEnumerable<TableItem> ItemList { get; set; }

    protected override async Task OnInitAsync()
    {
        PageSize = 5;
        CurrentPage = 1;
        ItemList = Items.Skip((CurrentPage - 1) * PageSize).Take(PageSize);
        TotalPages = (int)Math.Ceiling(Items.Count() / (decimal)PageSize);        
        SetPageSize("forward");
    }

    public void UpdateList(int currentPage)
    {
        ItemList = Items.Skip((currentPage - 1) * PageSize).Take(PageSize);
        CurrentPage = currentPage;
        this.StateHasChanged();
    }

    public void SetPageSize(string direction)
    {
        if ((direction == "forward" || direction == "last") && (EndPage < TotalPages))
        {
            StartPage = EndPage + 1;
            if (EndPage + PageSize < TotalPages)
            {
                EndPage = StartPage + PageSize - 1;
            }
            else
            {
                EndPage = TotalPages;
            }
            this.StateHasChanged();
        }
        else if ((direction == "back" || direction == "first") && (StartPage > 1))
        {
            EndPage = StartPage - 1;
            StartPage = StartPage - PageSize;
        }
    }

    public void NavigateToPage(string direction)
    {
        if (direction == "first")
        {
            CurrentPage = StartPage;
        }
        else if (direction == "next")
        {
            if (CurrentPage < TotalPages)
            {
                if (CurrentPage == EndPage)
                {
                    SetPageSize("forward");
                }
                CurrentPage += 1;
            }
        }
        else if (direction == "previous")
        {
            if (CurrentPage > 1)
            {
                if (CurrentPage == StartPage)
                {
                    SetPageSize("back");
                }
                CurrentPage -= 1;
            }
        }
        else if (direction == "last")
        {
            CurrentPage = EndPage;
        }
        UpdateList(CurrentPage);
    }
}